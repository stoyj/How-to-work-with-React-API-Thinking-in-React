//✅"Thinking in React" е концепция, която фокусира върху начина, по който трябва да се структурират приложенията в React, като се прилагат основни принципи на компонентна архитектура. Това е ключова част от подхода, за да се изграждат приложения по начин, който е лесен за поддръжка и разширение.

//✅Основни стъпки, за да "мислим в React"

//✅Във всеки React проект, интерфейсът трябва да бъде разделен на малки, независими компоненти. Всеки компонент трябва да бъде отговорен за една част от интерфейса. Това означава, че трябва да анализирате интерфейса и да се запитате:

//✅Кои части от интерфейса могат да бъдат отделени като независими единици?

//✅Какви данни трябва да се управляват от всеки компонент?

//✅Пример: В имейл клиент можем да имаме компоненти за "Списък с имейли", "Имейл детайли" и "Търсене". Всеки от тях трябва да бъде компонент.

//✅Дефиниране на компоненти като функции или класове

//✅React поддържа два основни типа компоненти:

//✅Функционални компоненти (с хуксове)-(with hooks)

//✅Класови компоненти

//✅За повечето нови приложения е препоръчително да използвате функционални компоненти, тъй като те са по-лесни за разбиране и предоставят чист, модерен синтаксис с хуковете.

//✅Пример за функционален компонент:
// function Greeting({ name }) {
// return <h1>Hello, {name}!</h1>;
// }

//✅Пример за класов компонент:
//class Greeting extends React.Component {
// render() {
// return <h1>Hello, {this.props.name}!</h1>;
// }
// }

//✅Използване на Props за предаване на данни

//✅Props (свойства) са начинът, по който компонентите комуникират помежду си. Това са стойности, които се предават от родителски компонент към дъщерен компонент. Props не могат да се променят от дъщерния компонент (те са само за четене).

//✅Пример:
//function App() {
// return <Greeting name="John" />;
// }

// function Greeting({ name }) {
// return <h1>Hello, {name}!</h1>;
// }
//✅В този пример компонентът App предава стойността "John" като prop към компонент Greeting.

//✅Управление на състояние със useState

//✅В React състоянието (state) се използва, за да се управляват динамични данни в компонента, които се променят. Състоянието се създава и обновява чрез хука useState (за функционални компоненти).

//✅Пример:
//✅import { useState } from 'react';

//✅function Counter() {
// const [count, setCount] = useState(0);

//✅ return (
// <div>
// <p>Count: {count}</p>
// <button onClick={() => setCount(count + 1)}>Increase</button>
// </div>
// );
// }
//✅В този пример, useState(0) създава състояние count, което започва със стойност 0. Когато натиснеш бутона, стойността на count се увеличава с 1.

//✅Обработване на събития и взаимодействие с потребителя

//✅Събития като onClick, onChange, и т.н., позволяват на компонентите да реагират на действията на потребителя. Обикновено, за да обработим събитие, ще използваме функции, които променят състоянието на компонента или извършват други действия.

//✅Пример:
//✅function Button() {
// function handleClick() {
// alert('Button clicked!');
// }
//✅ return <button onClick={handleClick}>Click me</button>;
// }
//✅Компоненти като черни кутии
//✅Когато изграждаме компонент в React, те трябва да функционират като черни кутии: всяка част от компонента трябва да има ясна входна и изходна точка. Това означава, че компонентите трябва да бъдат независими и да не се налага да знаят какви са данните на други компоненти, освен ако не са изрично подадени чрез props.

//✅Управление на списъци и ключове (Keys)

//✅В много случаи ще трябва да рендерирате списъци с елементи. За да осигурите правилно обновяване на интерфейса при промени, е необходимо да зададете ключове (keys) на елементите в списъка.

//✅Пример:
//✅function ItemList({ items }) {
//✅ return (
// <ul>
// {items.map((item, index) => (
// <li key={index}>{item}</li>
// ))}
// </ul>
// );
// }
//✅Рендериране на списъци с динамични данни
//✅Ако имате данни, които постоянно се променят (например списък с потребители), можете да използвате методи като .map() за рендериране на тези данни динамично в JSX.

//✅Резюме на принципите "Thinking in React":

//✅Декомпозирай приложението на компоненти.

//✅Използвай props за предаване на данни.

//✅Използвай state за управление на променливи, които се нуждаят от обновяване.

//✅Използвай събития (като onClick, onSubmit) за взаимодействие с потребителя.

//✅Рендирай списъци с динамично съдържание чрез методи като .map().
